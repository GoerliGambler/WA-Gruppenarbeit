Datensatz <- read.csv("Datensatz.csv")
Datensatz
Datensatz <- read.csv("Datensatz.csv")[,-1]
Datensatz
# Verwendete Bibliotheken
library("moments")
library(rcompanion)
library(DescTools)
# Datei einlesen
Datensatz <- read.csv("Datensatz.csv")[,-1]
# (a) Eine Funktion, die verschiedene geeignete deskriptive Statistiken
# fuer metrische Variablen berechnet und ausgibt
descStatMet = function(metricValue) {
# LagemaÃe
mv_quantile = quantile(metricValue)
mv_mean     = mean(metricValue)
names(mv_quantile) = c("q0.0", "q0.25", "q0.5", "q0.75", "q1.0")
names(mv_mean)     = "mean"
# StreuungsmaÃe
mv_range = mv_quantile[5] - mv_quantile[1]
mv_iqr   = IQR(metricValue)
mv_sd    = sd(metricValue)
names(mv_range) = "range"
names(mv_iqr)   = "iqr"
names(mv_sd)    = "sd"
# HÃ¶here Momente
mv_skewness = skewness(metricValue)
mv_kurtosis = kurtosis(metricValue)
names(mv_skewness) = "skewness"
names(mv_kurtosis) = "kurtosis"
# Ergebnis bestimmen
mv_result = c(mv_quantile, mv_mean, mv_range, mv_iqr, mv_sd,
mv_skewness, mv_kurtosis)
# hist(Datensatz$alter, main="Histogramm von Alter", xlab = "Alter in Jahren", ylab =  "absolute Haeufigkeit")
# boxplot(Datensatz$alter, main="Altersverteilung", horizontal=TRUE)
return(mv_result)
}
test = descStatMet(Datensatz$alter)
# (b) Eine Funktion, die verschiedene geeignete deskriptive Statistiken
# fuer kategoriale Variablen berechnet und ausgibt
# Kategoriale Variabeln werden gut durch Barplots wiedergegeben.
# Minimum und Modalwert sind brauchbare KenngrÃ¶Ãen
# die Wahl der StudienfÃ¤cher:
# Stabdiagramm
barplot(table(studienfach)[1:4], main = "StudienfÃ¤cher",
names.arg = c("Data Science", "Informatik", "Mathe",
"Statistik"), las=1, xlab = "Studienfaecher",
ylab = "absolute Haeufigkeit", col = "green")
# absolute HÃ¤ufigkeiten
DataStud <- sum(studienfach == "Data Science")
InfoStud <- sum(studienfach == "Informatik")
MathStud <- sum(studienfach == "Mathe")
StatStud <- sum(studienfach == "Statistik")
# Modalwert
max("DataStud","InfoStud", "MathStud","StatStud")
# Minimum
min("DataStud","InfoStud", "MathStud","StatStud")
# (c) Eine Funktion, die geeignete deskriptive bivariate Statistiken fuer
# den Zusammenhang zwischen zwei kategorialen Variablen
# berechnet ausgibt
# katBivStats - Berechnet Kennzahlen fÃ¼r den Zusammenhang zwischen
# zwei kategorialen Variablen
# Input: katx, katy - jeweils Auspraegungen einer kategorialen Variable
#
# Output: benannte Liste: tabelle - Kontingenztabelle der Faktoren
#                         cramerV - Kontingenzkoeffizient nach Cramer
#
katBivStats <- function(katx, katy){
# Kontingenztafel
kreuztab <- table(katx, katy)
# Cramers Kontingenzindex (Cramer's V)
cramerV <- cramerV(kreuztab)
return(list(tabelle = kreuztab, cramerV = cramerV))
}
# (d) Eine Funktion, die geeignete deskriptive bivariate Statistiken fuer
# den Zusammengang zwischen einer metrischen und einer
# dichotomen Variablen berechnet und ausgibt
# bivStats - Berechnet Kennzahlen, um Zusammenhang zwischen einer dichotomen und
#            einer metrischen Variable zu verdeutlichen
#
#Input: dicho - Auspraegungen der dichotomen Variable (numerischer Vektor)
#       metri - Auspraegungen der metrischen Variable (numerischer Vektor)
#
#Output: benannte Liste: summary - Matrix mit Summarys der, nach der dichotomen
#                                  Variable kategorisierten, metrischen Variable
#                                  (numerische Matrix)
#                       correlation - Pearson-Korrelations-koeffizient zwischen
#                                     den Variablen (numerisch)
#                       covariance - Kovarianz zwischen den Variablen (numerisch)
bivStat = function(dicho, metri){
cNames = levels(as.factor(dicho))
#"Zuteilen" der Werte der metrischen Variable zu den Auspraegungen der
#dichotomen Variable
dicho1 = dicho[1]
cName1 = cNames[cNames == dicho1]
metri1 = metri[dicho == dicho1]
cName2 = cNames[cNames != dicho1]
metri2 = metri[dicho != dicho1]
#Summary fuer Zuordnungen erstellen und in Matrix abspeichern
summary1 = summary(metri1)
summary2 = summary(metri2)
summ = cbind(summary1, summary2)
colnames(summ) = c(cName1, cName2)
#Variablen auf Korrelation und Covarianz untersuchen (jeweils mit Pearson)
dicho = as.numeric(dicho == dicho1)
corr = cor(dicho, metri, method = "pearson")
cova = cov(dicho, metri, method = "pearson")
return(list(summary = summ, correlation = corr, covariance = cova))
}
#Bsp:
bivStat(as.vector.factor(Datensatz$matheLk), Datensatz$alter)
# (e) Eine Funktion, die eine mindestens ordinal skalierte Variable
# quantilbasiert kategorisiert (z.B. in "niedrig", "mittel", "hoch")
kategorisierung = function( x ){
niedrig = 0
mittel = 0
hoch = 0
for( i in 1:100){
if( x[i] == 1  | x[i] == 2){ niedrig = niedrig + 1}
if( x[i] == 3  | x[i] == 4 | x[i] == 5){ mittel = mittel + 1}
if( x[i] == 6  | x[i] == 7){ hoch = hoch + 1}
}
return( c( niedrig,  mittel, hoch) )
}
katMathe = Datensatz$interesseMathe
barplot( kategorisierung(katMathe), xlab = "Interesse Mathe niedrig, mittel,hoch",
ylab = "Anzahl")
katProg = Datensatz$programmieren
barplot( kategorisierung(katProg), xlab = "Interesse Programmieren niedrig, mittel,hoch",
ylab = "Anzahl")
# (f) Eine Funktion, die eine geeignete Visualisierung von drei oder vier
# kategorialen Variablen erstellt
# Funktion vis_kat: Visualisiert kategoriale Variablen
# Eingabe : dataset : Ein Dataframe/Character Variable oder Liste mit
#                     kategorialen Daten
# Ausgabe : Visualierte Darstellung
vis_kat <- function(dataset){
barplot(table(faecher), ylab = "Anzahl")
}
# Freiwillig: weitere zur Deskription und Visualisierung geeignete
# Funktionen
Datensatz$programmieren
kategorisieren(Datensatz$programmieren)
kategorisierung(Datensatz$programmieren)
spineplot(x = Datensatz$studienfach, y =  Datensatz$programmieren)
spineplot(x = Datensatz$studienfach, y =  as.factor($programmieren))
spineplot(x = Datensatz$studienfach, y =  as.factor(Datensatz$programmieren))
katBivStats(Datensatz$studienfach, as.factor(Datensatz$programmieren))
katBivStats(Datensatz$studienfach, as.factor(Datensatz$interesseMathe))
katBivStats(Datensatz$studienfach, as.factor(Datensatz$programmieren))
katBivStats(Datensatz$studienfach, as.factor(Datensatz$interesseMathe))
which(Datensatz$studienfach == "Mathe")
n <- which(Datensatz$studienfach == "Mathe")
datensatz[n]
Datensatz[n]
Datensatz[n,]
# Zusammenhang zwischen Studienfach und Interesse am Programmieren
katBivStats(Datensatz$studienfach, as.factor(Datensatz$programmieren))
# Der Cramer V Koeffizient zeigt einen mittel-großen Zusammenhang zwischen
# Studienfach und dem Interesse am Programmieren
# Die Studierenden der Data Science liegen etwa im mittleren Bereich,
# die Informatik-Studierenden gaben ein eher großes, und die Statistik-
# und Mathematik-Studierenden ein geringeres Interesse an.
# Zusammenhang zwischen Studienfach und Interesse an Mathematik
katBivStats(Datensatz$studienfach, as.factor(Datensatz$interesseMathe))
# Der Cramer V Koeffizient spricht für einen moderaten Zusammenhang
# zwischen dem Studienfach und dem Interesse an Mathematik
# Das Interesse bei den Data Scientists ist liegt jeweils im mittleren Bereich,
# die Informatik-Studierenden tendieren eher zu größerem, und die Statistik-Studierenden
# zu geringerem Interesse; die Mathematik-Studierenden gaben jeweils ein
# eher geringes Inzeresse an
katBivStats(Datensatz$programmieren, Datensatz$interesseMathe)
corr(Datensatz$programmieren, Datensatz$interesseMathe)
cor(Datensatz$programmieren, Datensatz$interesseMathe)
